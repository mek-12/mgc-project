// <auto-generated />
using System;
using MGC.DAL.Concrete.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MGC.DAL.Migrations
{
    [DbContext(typeof(MgcContext))]
    [Migration("20191021175142_Seller_Table_Updated")]
    partial class Seller_Table_Updated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MGC.ENTITY.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRole");
                });

            modelBuilder.Entity("MGC.ENTITY.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("MGC.ENTITY.Identity.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("MGC.ENTITY.MCategory.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<Guid>("MiddleCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryCode")
                        .IsUnique();

                    b.HasIndex("MiddleCategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("MGC.ENTITY.MCategory.MainCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryCode")
                        .IsUnique();

                    b.ToTable("MainCategory");
                });

            modelBuilder.Entity("MGC.ENTITY.MCategory.MiddleCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MainCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MiddleCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryCode")
                        .IsUnique();

                    b.HasIndex("MainCategoryId");

                    b.HasIndex("MiddleCategoryId");

                    b.ToTable("MiddleCategory");
                });

            modelBuilder.Entity("MGC.ENTITY.MPlace.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("MGC.ENTITY.MPlace.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("MGC.ENTITY.MPlace.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MComputer.Computer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CampaignCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComputerBrandId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountRate")
                        .HasColumnType("int");

                    b.Property<bool>("InCampaign")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductCode")
                        .HasColumnType("int");

                    b.Property<int>("PurchacePrice")
                        .HasColumnType("int");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ComputerBrandId");

                    b.HasIndex("SellerId");

                    b.ToTable("Computer");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MComputer.ComputerBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ComputerBrand");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MComputer.ComputerCPU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ComputerCPU");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MComputer.ComputerCPUType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ComputerCPUType");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MComputer.ComputerComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComputerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId");

                    b.ToTable("ComputerComment");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MComputer.ComputerFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ComputerFilter");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MComputer.ComputerHDDCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Content")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ComputerHDDCapacity");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MComputer.ComputerImage", b =>
                {
                    b.Property<Guid>("ComputerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QueueNumber")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ComputerId", "QueueNumber");

                    b.ToTable("ComputerImage");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MComputer.ComputerProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ComputerCPUId")
                        .HasColumnType("int");

                    b.Property<int>("ComputerCPUTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ComputerCache")
                        .HasColumnType("int");

                    b.Property<int>("ComputerHDDCapacityId")
                        .HasColumnType("int");

                    b.Property<Guid>("ComputerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ComputerRamSpeedId")
                        .HasColumnType("int");

                    b.Property<int>("ComputerSSDCapacityId")
                        .HasColumnType("int");

                    b.Property<int>("ComputerScreenCardId")
                        .HasColumnType("int");

                    b.Property<int>("ComputerScreenCardRamId")
                        .HasColumnType("int");

                    b.Property<int>("ComputerScreenCardTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ComputerScreenSizeId")
                        .HasColumnType("int");

                    b.Property<bool>("HaveBluetooth")
                        .HasColumnType("bit");

                    b.Property<bool>("HaveCardReader")
                        .HasColumnType("bit");

                    b.Property<bool>("HaveEthernet")
                        .HasColumnType("bit");

                    b.Property<bool>("HaveHDMI")
                        .HasColumnType("bit");

                    b.Property<bool>("HaveOS")
                        .HasColumnType("bit");

                    b.Property<bool>("HaveOpticalDriver")
                        .HasColumnType("bit");

                    b.Property<bool>("HaveTouchScreen")
                        .HasColumnType("bit");

                    b.Property<bool>("HaveUSB3")
                        .HasColumnType("bit");

                    b.Property<bool>("HaveUSB31")
                        .HasColumnType("bit");

                    b.Property<bool>("HaveWebCam")
                        .HasColumnType("bit");

                    b.Property<int>("MemorySlot")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComputerCPUId");

                    b.HasIndex("ComputerCPUTypeId");

                    b.HasIndex("ComputerHDDCapacityId");

                    b.HasIndex("ComputerId");

                    b.HasIndex("ComputerRamSpeedId");

                    b.HasIndex("ComputerSSDCapacityId");

                    b.HasIndex("ComputerScreenCardId");

                    b.HasIndex("ComputerScreenCardRamId");

                    b.HasIndex("ComputerScreenCardTypeId");

                    b.HasIndex("ComputerScreenSizeId");

                    b.ToTable("ComputerProperty");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MComputer.ComputerRamSpeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Content")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ComputerRamSpeed");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MComputer.ComputerSSDCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ComputerSSDCapacity");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MComputer.ComputerScreenCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ComputerScreenCard");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MComputer.ComputerScreenCardRam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ComputerScreenCardRam");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MComputer.ComputerScreenCardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ComputerScreenCardType");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MComputer.ComputerScreenSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("ComputerScreenSize");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MDataStorage.DataStorage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("DataStorage");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MPhone.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CampaignCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountRate")
                        .HasColumnType("int");

                    b.Property<bool>("InCampaign")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneBrandId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductCode")
                        .HasColumnType("int");

                    b.Property<int>("PurchacePrice")
                        .HasColumnType("int");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PhoneBrandId");

                    b.HasIndex("SellerId");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MPhone.PhoneBatteryCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhoneBatteryCapacity");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MPhone.PhoneBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhoneBrand");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MPhone.PhoneColor", b =>
                {
                    b.Property<Guid>("PhoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PhoneId", "ColorCode");

                    b.ToTable("PhoneColor");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MPhone.PhoneComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PhoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PhoneId");

                    b.ToTable("PhoneComment");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MPhone.PhoneCpuCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhoneCpuCapacity");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MPhone.PhoneImage", b =>
                {
                    b.Property<Guid>("PhoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QueueNumber")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("PhoneId", "QueueNumber");

                    b.ToTable("PhoneImage");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MPhone.PhoneInternalMemory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhoneInternalMemory");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MPhone.PhoneOS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhoneOS");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MPhone.PhoneOSType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhoneOSType");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MPhone.PhoneProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AbroadSales")
                        .HasColumnType("bit");

                    b.Property<int>("BatteryType")
                        .HasColumnType("int");

                    b.Property<string>("CellularSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChargingInput")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectionSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CpuCapacityId")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DualSIM")
                        .HasColumnType("bit");

                    b.Property<bool>("ExpandableMemory")
                        .HasColumnType("bit");

                    b.Property<bool>("EyeScan")
                        .HasColumnType("bit");

                    b.Property<bool>("FaceRecognition")
                        .HasColumnType("bit");

                    b.Property<bool>("Fingerprint")
                        .HasColumnType("bit");

                    b.Property<string>("FrontCamera")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GPS")
                        .HasColumnType("bit");

                    b.Property<bool>("IntegratedCamera")
                        .HasColumnType("bit");

                    b.Property<bool>("IntegratedFlash")
                        .HasColumnType("bit");

                    b.Property<string>("MainCamera")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NFC")
                        .HasColumnType("bit");

                    b.Property<int>("PhoneBatteryCapacityId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneCpuCapacityId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneInternalMemoryId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneOSId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneOSTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneRamCapasityId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneScreenDimensionId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneWifiId")
                        .HasColumnType("int");

                    b.Property<string>("ScreenType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalTalkTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TouchScreen")
                        .HasColumnType("bit");

                    b.Property<int>("WarrantyTime")
                        .HasColumnType("int");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WifiId")
                        .HasColumnType("int");

                    b.Property<bool>("WirelessCharging")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CpuCapacityId");

                    b.HasIndex("PhoneBatteryCapacityId");

                    b.HasIndex("PhoneInternalMemoryId");

                    b.HasIndex("PhoneOSId");

                    b.HasIndex("PhoneOSTypeId");

                    b.HasIndex("PhoneRamCapasityId");

                    b.HasIndex("PhoneScreenDimensionId");

                    b.HasIndex("WifiId");

                    b.ToTable("PhoneProperty");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MPhone.PhoneRamCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhoneRamCapacity");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MPhone.PhoneScreenDimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhoneScreenDimension");
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MPhone.PhoneWifi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhoneWifi");
                });

            modelBuilder.Entity("MGC.ENTITY.MSeller.Seller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AvarageRating")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SellerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SellerCode")
                        .IsUnique();

                    b.ToTable("Seller");
                });

            modelBuilder.Entity("MGC.ENTITY.MSeller.SellerComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SellerComment");
                });

            modelBuilder.Entity("MGC.ENTITY.Identity.UserRole", b =>
                {
                    b.HasOne("MGC.ENTITY.Identity.ApplicationRole", "ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGC.ENTITY.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MGC.ENTITY.MCategory.Category", b =>
                {
                    b.HasOne("MGC.ENTITY.MCategory.MiddleCategory", "MiddleCategory")
                        .WithMany("Categories")
                        .HasForeignKey("MiddleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MGC.ENTITY.MCategory.MiddleCategory", b =>
                {
                    b.HasOne("MGC.ENTITY.MCategory.MainCategory", "MainCategory")
                        .WithMany("MiddleCatgories")
                        .HasForeignKey("MainCategoryId");

                    b.HasOne("MGC.ENTITY.MCategory.MiddleCategory", "_MiddleCategory")
                        .WithMany()
                        .HasForeignKey("MiddleCategoryId");
                });

            modelBuilder.Entity("MGC.ENTITY.MPlace.District", b =>
                {
                    b.HasOne("MGC.ENTITY.MPlace.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MGC.ENTITY.MPlace.Province", b =>
                {
                    b.HasOne("MGC.ENTITY.MPlace.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MComputer.Computer", b =>
                {
                    b.HasOne("MGC.ENTITY.MProducts.MComputer.ComputerBrand", "ComputerBrand")
                        .WithMany()
                        .HasForeignKey("ComputerBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGC.ENTITY.MSeller.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MComputer.ComputerComment", b =>
                {
                    b.HasOne("MGC.ENTITY.MProducts.MComputer.Computer", "Computer")
                        .WithMany()
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MComputer.ComputerImage", b =>
                {
                    b.HasOne("MGC.ENTITY.MProducts.MComputer.Computer", "Computer")
                        .WithMany()
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MComputer.ComputerProperty", b =>
                {
                    b.HasOne("MGC.ENTITY.MProducts.MComputer.ComputerCPU", "ComputerCPU")
                        .WithMany()
                        .HasForeignKey("ComputerCPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGC.ENTITY.MProducts.MComputer.ComputerCPUType", "ComputerCPUType")
                        .WithMany()
                        .HasForeignKey("ComputerCPUTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGC.ENTITY.MProducts.MComputer.ComputerHDDCapacity", "ComputerHDDCapacity")
                        .WithMany()
                        .HasForeignKey("ComputerHDDCapacityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGC.ENTITY.MProducts.MComputer.Computer", "Computer")
                        .WithMany()
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGC.ENTITY.MProducts.MComputer.ComputerRamSpeed", "ComputerRamSpeed")
                        .WithMany()
                        .HasForeignKey("ComputerRamSpeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGC.ENTITY.MProducts.MComputer.ComputerSSDCapacity", "ComputerSSDCapacity")
                        .WithMany()
                        .HasForeignKey("ComputerSSDCapacityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGC.ENTITY.MProducts.MComputer.ComputerScreenCard", "ComputerScreenCard")
                        .WithMany()
                        .HasForeignKey("ComputerScreenCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGC.ENTITY.MProducts.MComputer.ComputerScreenCardRam", "ComputerScreenCardRam")
                        .WithMany()
                        .HasForeignKey("ComputerScreenCardRamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGC.ENTITY.MProducts.MComputer.ComputerScreenCardType", "ComputerScreenCardType")
                        .WithMany()
                        .HasForeignKey("ComputerScreenCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGC.ENTITY.MProducts.MComputer.ComputerScreenSize", "ComputerScreenSize")
                        .WithMany()
                        .HasForeignKey("ComputerScreenSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MDataStorage.DataStorage", b =>
                {
                    b.HasOne("MGC.ENTITY.MSeller.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MPhone.Phone", b =>
                {
                    b.HasOne("MGC.ENTITY.MProducts.MPhone.PhoneBrand", "PhoneBrand")
                        .WithMany("Phones")
                        .HasForeignKey("PhoneBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGC.ENTITY.MSeller.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MPhone.PhoneColor", b =>
                {
                    b.HasOne("MGC.ENTITY.MProducts.MPhone.Phone", "Phone")
                        .WithMany("Colors")
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MPhone.PhoneComment", b =>
                {
                    b.HasOne("MGC.ENTITY.MProducts.MPhone.Phone", "Phone")
                        .WithMany("Comments")
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MPhone.PhoneImage", b =>
                {
                    b.HasOne("MGC.ENTITY.MProducts.MPhone.Phone", "Phone")
                        .WithMany("Images")
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MGC.ENTITY.MProducts.MPhone.PhoneProperty", b =>
                {
                    b.HasOne("MGC.ENTITY.MProducts.MPhone.PhoneCpuCapacity", "PhoneCpuCapacity")
                        .WithMany()
                        .HasForeignKey("CpuCapacityId");

                    b.HasOne("MGC.ENTITY.MProducts.MPhone.PhoneBatteryCapacity", "PhoneBatteryCapacity")
                        .WithMany()
                        .HasForeignKey("PhoneBatteryCapacityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGC.ENTITY.MProducts.MPhone.PhoneInternalMemory", "PhoneInternalMemory")
                        .WithMany()
                        .HasForeignKey("PhoneInternalMemoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGC.ENTITY.MProducts.MPhone.PhoneOS", "PhoneOS")
                        .WithMany()
                        .HasForeignKey("PhoneOSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGC.ENTITY.MProducts.MPhone.PhoneOSType", "PhoneOSType")
                        .WithMany()
                        .HasForeignKey("PhoneOSTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGC.ENTITY.MProducts.MPhone.PhoneRamCapacity", "PhoneRamCapacity")
                        .WithMany()
                        .HasForeignKey("PhoneRamCapasityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGC.ENTITY.MProducts.MPhone.PhoneScreenDimension", "PhoneScreenDimension")
                        .WithMany()
                        .HasForeignKey("PhoneScreenDimensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGC.ENTITY.MProducts.MPhone.PhoneWifi", "PhoneWifi")
                        .WithMany()
                        .HasForeignKey("WifiId");
                });

            modelBuilder.Entity("MGC.ENTITY.MSeller.Seller", b =>
                {
                    b.HasOne("MGC.ENTITY.MPlace.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGC.ENTITY.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MGC.ENTITY.MSeller.SellerComment", b =>
                {
                    b.HasOne("MGC.ENTITY.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
