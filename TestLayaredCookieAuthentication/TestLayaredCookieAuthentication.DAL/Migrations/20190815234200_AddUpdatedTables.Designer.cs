// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestLayaredCookieAuthentication.DAL.Concrete.EFCodeFirst;

namespace TestLayaredCookieAuthentication.DAL.Migrations
{
    [DbContext(typeof(TestContextEFCF))]
    [Migration("20190815234200_AddUpdatedTables")]
    partial class AddUpdatedTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.CategoryM.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("MiddleCategoryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("MiddleCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.CategoryM.MainCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MainCategories");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.CategoryM.MiddleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("MainCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("MiddleCategories");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.CustomerM.Customer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyTitle")
                        .IsRequired();

                    b.Property<string>("CompanyTitleNext");

                    b.Property<int>("CurrencyType");

                    b.Property<int?>("DistrictId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<int?>("ProvinceId");

                    b.Property<string>("TaxDepartmentId");

                    b.Property<string>("WorkPhoneNumber")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.CustomerM.CustomerDeliveryAddress", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("AddressTitle");

                    b.Property<string>("CustomerId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PostalCode");

                    b.Property<string>("ShipCountry");

                    b.Property<string>("ShipDistrict");

                    b.Property<string>("ShipProvince");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerDeliveryAddresses");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.CustomerM.CustomerInvoiceAddress", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("AddressTitle");

                    b.Property<string>("CompanyName");

                    b.Property<string>("CustomerId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PostalCode");

                    b.Property<string>("ShipCountry");

                    b.Property<string>("ShipDistrict");

                    b.Property<string>("ShipProvince");

                    b.Property<string>("TaxDepartmentId");

                    b.Property<string>("TaxNo");

                    b.Property<bool>("isInstitutional");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TaxDepartmentId");

                    b.ToTable("CustomerInvoiceAddresses");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoles");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.Identity.UserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.InvoiceWaybillM.Invoice", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CustomerId");

                    b.Property<string>("CustomerTaxDepartmentNo");

                    b.Property<DateTime>("DateTimeofShipment");

                    b.Property<DateTime>("DateTimeofWaybill");

                    b.Property<string>("GrandTotal");

                    b.Property<string>("InvoiceCode");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("NetAmount");

                    b.Property<string>("OrderId");

                    b.Property<string>("SerialNo");

                    b.Property<string>("TradeCompanyId");

                    b.Property<string>("VoucherNo");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TradeCompanyId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.InvoiceWaybillM.Waybill", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustomerId");

                    b.Property<string>("CustomerTaxDepartmentNo");

                    b.Property<DateTime>("DateofShipment");

                    b.Property<string>("InvoiceCode");

                    b.Property<string>("OrderId");

                    b.Property<string>("SerialNo");

                    b.Property<string>("TradeCompanyId");

                    b.Property<string>("VoucherNo");

                    b.Property<string>("WaybillCode");

                    b.Property<DateTime>("WaybillDate");

                    b.Property<string>("WaybillNo");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TradeCompanyId");

                    b.ToTable("Waybills");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.OrderM.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustomerId");

                    b.Property<string>("OrderCode");

                    b.Property<DateTime>("OrderDate");

                    b.Property<DateTime>("RequiredDate");

                    b.Property<string>("ShipAddress");

                    b.Property<string>("ShipCountry");

                    b.Property<string>("ShipDistrict");

                    b.Property<string>("ShipName");

                    b.Property<string>("ShipPostalCode");

                    b.Property<string>("ShipProvince");

                    b.Property<DateTime>("ShippedDate");

                    b.Property<string>("TradeCompanyId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TradeCompanyId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.OrderM.OrderDetail", b =>
                {
                    b.Property<string>("OrderId");

                    b.Property<string>("ProductId");

                    b.Property<int>("Discount");

                    b.Property<int>("Quantity");

                    b.Property<double>("UnitPrice");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.Place.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.Place.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DistrictName");

                    b.HasKey("DistrictId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.Place.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId");

                    b.Property<int?>("DistrictId");

                    b.Property<string>("ProvinceName");

                    b.HasKey("ProvinceId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.ProductM.Product", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreateUserId");

                    b.Property<string>("Explain");

                    b.Property<string>("ImageBase64");

                    b.Property<int>("KDVRate");

                    b.Property<int>("ProductCount");

                    b.Property<string>("ProductName");

                    b.Property<string>("StCode");

                    b.Property<int>("StatusId");

                    b.Property<string>("TradeCompanyId");

                    b.Property<double>("UnitPrice");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdateUserId");

                    b.Property<double>("WholesalePrice");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("StCode")
                        .IsUnique()
                        .HasFilter("[StCode] IS NOT NULL");

                    b.HasIndex("TradeCompanyId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.ProductM.StockInput", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateUserId");

                    b.Property<DateTime>("EntryDate");

                    b.Property<int>("ProductCount");

                    b.Property<string>("ProductId");

                    b.Property<string>("StatusId");

                    b.Property<string>("StcokInputCode")
                        .IsRequired();

                    b.Property<string>("TradeCompanyId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdateUserId");

                    b.Property<string>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TradeCompanyId");

                    b.HasIndex("UpdateUserId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("StockInputs");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.ProductM.StockOut", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("OutDate");

                    b.Property<string>("OutUserId");

                    b.Property<int>("ProductCount");

                    b.Property<string>("ProductId");

                    b.Property<string>("StatusId");

                    b.Property<string>("StockOutCode")
                        .IsRequired();

                    b.Property<string>("TradeCompanyId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("UpdateUserId");

                    b.Property<string>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("OutUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TradeCompanyId");

                    b.HasIndex("UpdateUserId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("StockOuts");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.Tax.TaxDepartment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DepartmentName");

                    b.Property<int>("DistrictId");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("TaxDepartments");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.TradeM.TCompanyPartners", b =>
                {
                    b.Property<string>("TradeCompanyId");

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Position");

                    b.HasKey("TradeCompanyId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("TCompanyPartners");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.TradeM.TradeCompany", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyName");

                    b.Property<string>("Country");

                    b.Property<string>("District");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<string>("FullAddress");

                    b.Property<string>("Phone");

                    b.Property<string>("Province");

                    b.Property<string>("TradeRegistrationNo");

                    b.HasKey("Id");

                    b.ToTable("TradeCompanies");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.WareHouseM.Warehouse", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("StatusId");

                    b.Property<string>("TradeCompanyId");

                    b.Property<string>("WarehouseName");

                    b.HasKey("Id");

                    b.HasIndex("TradeCompanyId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.CategoryM.Category", b =>
                {
                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.CategoryM.MiddleCategory", "MiddleCategory")
                        .WithMany()
                        .HasForeignKey("MiddleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.CategoryM.MiddleCategory", b =>
                {
                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.CategoryM.MainCategory", "MainCategory")
                        .WithMany()
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.CustomerM.Customer", b =>
                {
                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.Place.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.Place.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.CustomerM.CustomerDeliveryAddress", b =>
                {
                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.CustomerM.Customer", "Customer")
                        .WithMany("CustomerDeliveryAddresses")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.CustomerM.CustomerInvoiceAddress", b =>
                {
                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.CustomerM.Customer", "Customer")
                        .WithMany("CustomerInvoiceAddresses")
                        .HasForeignKey("CustomerId");

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.Tax.TaxDepartment", "TaxDepartment")
                        .WithMany()
                        .HasForeignKey("TaxDepartmentId");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.Identity.UserRole", b =>
                {
                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.Identity.ApplicationRole", "ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.InvoiceWaybillM.Invoice", b =>
                {
                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.CustomerM.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.OrderM.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.TradeM.TradeCompany", "TradeCompany")
                        .WithMany()
                        .HasForeignKey("TradeCompanyId");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.InvoiceWaybillM.Waybill", b =>
                {
                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.CustomerM.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.OrderM.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.TradeM.TradeCompany", "TradeCompany")
                        .WithMany()
                        .HasForeignKey("TradeCompanyId");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.OrderM.Order", b =>
                {
                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.CustomerM.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.TradeM.TradeCompany", "TradeCompany")
                        .WithMany()
                        .HasForeignKey("TradeCompanyId");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.OrderM.OrderDetail", b =>
                {
                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.OrderM.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.ProductM.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.Place.Province", b =>
                {
                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.Place.Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId");

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.Place.District")
                        .WithMany("Provinces")
                        .HasForeignKey("DistrictId");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.ProductM.Product", b =>
                {
                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.CategoryM.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.Identity.ApplicationUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId");

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.TradeM.TradeCompany", "TradeCompany")
                        .WithMany()
                        .HasForeignKey("TradeCompanyId");

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.Identity.ApplicationUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.ProductM.StockInput", b =>
                {
                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.Identity.ApplicationUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId");

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.ProductM.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.TradeM.TradeCompany", "TradeCompany")
                        .WithMany()
                        .HasForeignKey("TradeCompanyId");

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.Identity.ApplicationUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.WareHouseM.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.ProductM.StockOut", b =>
                {
                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.Identity.ApplicationUser", "OutUser")
                        .WithMany()
                        .HasForeignKey("OutUserId");

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.ProductM.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.TradeM.TradeCompany", "TradeCompany")
                        .WithMany()
                        .HasForeignKey("TradeCompanyId");

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.Identity.ApplicationUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.WareHouseM.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.Tax.TaxDepartment", b =>
                {
                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.Place.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.TradeM.TCompanyPartners", b =>
                {
                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.TradeM.TradeCompany", "TradeCompany")
                        .WithMany()
                        .HasForeignKey("TradeCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestLayaredCookieAuthentication.ENTITIES.WareHouseM.Warehouse", b =>
                {
                    b.HasOne("TestLayaredCookieAuthentication.ENTITIES.TradeM.TradeCompany", "TradeCompany")
                        .WithMany()
                        .HasForeignKey("TradeCompanyId");
                });
#pragma warning restore 612, 618
        }
    }
}
